class KalmanFilter:
    """
    A simple Kalman filter implementation.

    Assumes a process with additive white Gaussian noise and attempts to estimate
    the state of the process using noisy measurements.

    Generated by chatGPT.

    Parameters
    ----------
    process_variance : float
        The variance of the process noise. Controls the trade-off between trusting
        the process model and the measurements.
    estimated_measurement_variance : float
        The variance of the measurement noise. Controls the trade-off between trusting
        the process model and the measurements.

    Equations:
    ----------
    Main update equation
    # Xk = Kk Zk + (1 - Kk) X{k-1}
    # X_k^{\hat} = K_k * Z_k + (1 - K_k) * X_{k-1}^{\hat}
    Assumption + prediction
    # Xk = A X{k-1} + B uk + w{k-1}
    # zk = H xk + vk
    Prediction
    Xk- = A X{k-1} + B uk
    Pk- = A P{k-1} AT + Q
    Update
    Kk = Pk- HT(H Pk- HT + R)^-1
    xk = (1 - Kk H ) Xk + Kk zk
    Pk = (1-Kk H) Pk-

    Example
    ----------
        # Create a Kalman filter with some process variance and some estimated measurement variance
        kalman_filter = KalmanFilter(1, 1)
        # Provide an initial estimate of the process state
        kalman_filter.input_latest_noisy_measurement(5)
        # Get the current estimate of the process state
        estimate = kalman_filter.get_latest_estimated_measurement()
        print(estimate)  # Output: 5
        # Input a new measurement
        kalman_filter.input_latest_noisy_measurement(10)
        # Get the updated estimate of the process state
        estimate = kalman_filter.get_latest_estimated_measurement()
        print(estimate)  # Output: something close to 7.5
    """
    
    def __init__(
        self,
        process_variance,
        estimated_measurement_variance,
        posteri_estimate=0.0,
        posteri_error_estimate=1.0,
    ):
        self.process_variance = process_variance
        self.estimated_measurement_variance = estimated_measurement_variance
        self.posteri_estimate = posteri_estimate
        self.posteri_error_estimate = posteri_error_estimate

    def input_latest_noisy_measurement(self, measurement):
        """
        Update the estimate of the process state based on the latest measurement.
        
        Parameters
        ----------
        measurement : float
            The latest measurement of the process state.
        """
        priori_estimate = self.posteri_estimate
        priori_error_estimate = self.posteri_error_estimate + self.process_variance
        
        print('Prediction')
        print(round(priori_estimate,3), round(priori_error_estimate,3))

        blending_factor = priori_error_estimate / (
            priori_error_estimate + self.estimated_measurement_variance
        )
        self.posteri_estimate = priori_estimate + blending_factor * (
            measurement - priori_estimate
        )
        self.posteri_error_estimate = (1 - blending_factor) * priori_error_estimate

        print('Update')
        print(round(self.posteri_estimate,3), round(self.posteri_error_estimate,3))

    def get_latest_estimated_measurement(self):
        """
        Return the current estimate of the process state.
        
        Returns
        -------
        float
            The current estimate of the process state.
        """
        return self.posteri_estimate
    
    def get_latest_estiamted_error(self):
        """
        Return the current estimate error of the process state.
        
        Returns
        -------
        float
            The current estimate error of the process state.
        """
        return self.posteri_error_estimate
